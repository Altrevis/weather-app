// === Script pour afficher les pr√©visions m√©t√©o ===

// Ex√©cuter le script une fois que le DOM est compl√®tement charg√©
document.addEventListener('DOMContentLoaded', function () {
    // R√©cup√©ration des param√®tres de l'URL (par exemple, ?city=Paris)
    const urlParams = new URLSearchParams(window.location.search);
    const city = urlParams.get('city'); // R√©cup√®re la valeur du param√®tre 'city'

    // S√©lection des √©l√©ments HTML o√π afficher les donn√©es
    const cityNameElement = document.getElementById('cityName'); // √âl√©ment pour afficher le nom de la ville
    const forecastCards = document.getElementById('forecastCards'); // Conteneur pour les cartes de pr√©visions

    // Afficher le nom de la ville dans l'√©l√©ment correspondant
    if (cityNameElement) {
        cityNameElement.textContent = city;
    }

    // Si aucune ville n'est sp√©cifi√©e, afficher un message d'erreur
    if (!city) {
        if (forecastCards) {
            forecastCards.innerHTML = '<p>Ville non sp√©cifi√©e.</p>';
        }
        return; // Arr√™ter l'ex√©cution du script
    }

    // Effectuer une requ√™te pour r√©cup√©rer les pr√©visions m√©t√©o pour la ville sp√©cifi√©e
    fetch(`/forecast/${city}`)
        .then(response => {
            console.log('R√©ponse brute:', response); // Afficher la r√©ponse brute dans la console pour d√©bogage
            if (!response.ok) {
                // Si la r√©ponse HTTP n'est pas correcte, lever une erreur
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json(); // Convertir la r√©ponse en JSON
        })
        .then(data => {
            console.log('Donn√©es re√ßues:', data); // Afficher les donn√©es re√ßues dans la console

            if (!forecastCards) return; // Si le conteneur des cartes n'existe pas, arr√™ter ici

            // R√©initialiser le contenu du conteneur des cartes
            forecastCards.innerHTML = '';

            // V√©rifier si des pr√©visions sont disponibles et si elles sont sous forme de tableau
            if (data.predictions && Array.isArray(data.predictions)) {
                // Parcourir chaque pr√©vision et cr√©er une carte pour l'afficher
                data.predictions.forEach(prediction => {
                    const card = document.createElement('div'); // Cr√©er un √©l√©ment div pour la carte
                    card.className = 'weather-card'; // Ajouter une classe CSS pour le style
                    card.innerHTML = `
                        <strong>üìÖ Date :</strong> ${prediction.date} <br>
                        <strong>üå° Temp√©rature pr√©vue :</strong> ${prediction.temperature}¬∞C
                    `;
                    forecastCards.appendChild(card); // Ajouter la carte au conteneur
                });
            } else {
                // Si aucune pr√©vision n'est disponible, afficher un message
                forecastCards.innerHTML = '<p>Aucune pr√©vision disponible.</p>';
            }
        })
        .catch(error => {
            // Gestion des erreurs lors de la r√©cup√©ration des donn√©es
            console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error); // Afficher l'erreur dans la console
            if (forecastCards) {
                // Afficher un message d'erreur dans le conteneur
                forecastCards.innerHTML = `<p>Erreur: ${error.message}</p>`;
            }
        });
});
